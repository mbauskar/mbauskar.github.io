{"version":3,"sources":["services/deviceUtils.js","redux/actions.js","services/parser.js","redux/index.js","redux/reducers.js","redux/store.js","services/device.js","services/parserScript.js","editor/editor.js","controls/input.js","components/buttons.js","components/verify.js","serviceWorker.js","index.js"],"names":["Device","device","prepareParameterMappings","parameter_mapping","parameter_options","available_server_names","settings","matchingKeywords","idx","length","mapping","machinename","servername","push","send","message","console","warn","info","label","log","debug","error","modulo_256","parsedString","checksum","Buffer","from","reduce","prev","current","toString","toUpperCase","slice","parse_and_calculate_value","parameter","value","calculated_value","operand_mapper","divide_by","multiply_by","max_decimals","operator_mapper","val","divisor","multiplier","precision","toFixed","apply_round","noa","Math","round","requires_int","parseInt","options","isNaN","parseFloat","forEach","operation","operand","err","stack","this","bulk_insert","model","instances","store","dispatch","type","saveParsers","parsers","unshift","id","s3_key","file_name","array_to_object","list","id_field","Object","assign","map","item","models_id_mapper","DeviceParser","get_model_id_field","hasOwnProperty","Error","save_instance","state","instance","keys","instance_id","to_insert","updated_instance","old_instance","to_update","delete_instance","new_instances","Array","prepare_instances","clear_model","defaultFilters","lab_id","device_id","parser_id","reducers","combineReducers","models","action","filters","field","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","saveDevices","devices","JSON","parse","deviceId","deviceName","labId_id","globalParser_id","fetchDevices","fetch","method","headers","data","stringify","then","response","json","catch","getDefaultParser","addScriptAndExecute","receivedStr","parserScript","handleChange","existingParser","document","getElementById","remove","newParser","createElement","text","replace","RegExp","split","prepareParser","body","appendChild","getState","getDevice","parsedResult","parser","received_str","parserError","getEditor","props","editorOptions","tabSize","insertSpaces","automaticLayout","folding","screen","width","lineNumbers","glyphMargin","minimap","enabled","height","language","theme","editorDidMount","monaco","editor","defaultParser","focus","onChange","evt","prepareInputProps","name","className","disabled","input_label","preventDefault","trim","word","charAt","join","placeholder","renderInput","inputProps","FormGroup","Label","for","Input","renderButtons","Col","xs","style","paddingTop","Row","marginBottom","textAlign","Button","outline","color","size","onClick","parseReceivedStr","VerifyParsersConnector","connect","ownProps","sortById","items","sort","a","b","_devices","_parsers","deviceParsers","useState","setValues","labId","parserId","values","Fragment","sm","paddingLeft","target","disable","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","fetchParsers","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4589f60.chunk.js","sourcesContent":["class Device {\n  constructor(device) {\n    this.device = device;\n    this.settings = \"settings\" in device ? device.settings : {};\n\n    this.prepareParameterMappings();\n  }\n\n  prepareParameterMappings = () => {\n    this.parameter_mapping = {};\n    this.parameter_options = {};\n    this.available_server_names = [];\n\n    let { matchingKeywords = [] } = this.settings;\n    for (let idx = 0; idx < matchingKeywords.length; idx++) {\n      let mapping = matchingKeywords[idx];\n      let { machinename = \"\", servername = \"\" } = mapping;\n      this.parameter_mapping[machinename] = servername;\n      this.parameter_options[servername] = mapping;\n      this.available_server_names.push(servername);\n    }\n  };\n\n  send = (message) => console.warn(`[MockDevice] ${message}`);\n  info = (message, label) =>\n    console.log(`[${label || \"MockDevice\"}] ${message}`);\n  debug = (message, label) =>\n    console.warn(`[${label || \"MockDevice\"}] ${message}`);\n  error = (message, label) =>\n    console.error(`[${label || \"MockDevice\"}] ${message}`);\n\n  // device utils functions\n  modulo_256 = (parsedString) => {\n    let checksum = Buffer.from(parsedString).reduce(\n      (prev, current) => prev + current,\n      0\n    );\n    return `00${(checksum % 256).toString(16).toUpperCase()}`.slice(-2);\n  };\n\n  parse_and_calculate_value = (parameter, value) => {\n    let calculated_value = \"\";\n    const operand_mapper = { divide_by: 1, multiply_by: 1, max_decimals: 2 };\n    const operator_mapper = {\n      divide_by: (val, divisor) => val / divisor,\n      multiply_by: (val, multiplier) => val * multiplier,\n      max_decimals: (val, precision) => val.toFixed(precision),\n      apply_round: (val, noa) => Math.round(val),\n      requires_int: (val, noa) => parseInt(val),\n    };\n\n    let options =\n      parameter in this.parameter_options\n        ? this.parameter_options[parameter]\n        : {};\n    if (isNaN(value) || isNaN(parseFloat(value))) return value;\n\n    calculated_value = parseFloat(value);\n    let precedence = [\n      \"divide_by\",\n      \"multiply_by\",\n      \"max_decimals\",\n      \"apply_round\",\n      \"requires_int\",\n    ];\n\n    precedence.forEach((operation) => {\n      try {\n        if (!(operation in options)) return;\n        let operand = options[operation];\n        operand = isNaN(operand) ? operand_mapper[operation] : operand;\n        let calculate = operand ? operator_mapper[operation] : (value) => value;\n        calculated_value = calculate(calculated_value, operand);\n      } catch (err) {\n        this.error(err.stack);\n      }\n    });\n\n    return calculated_value;\n  };\n}\n\nexport { Device };\n","import { store } from \"./store\";\n\nconst clear = (model) => store.dispatch({ type: \"CLEAR\", model });\nconst get = (model, filters) => store.dispatch({ type: \"GET\", model, filters });\nconst add = (model, instance) =>\n  store.dispatch({ type: \"SAVE\", model, instance });\nconst get_devices = (filters) =>\n  store.dispatch({ type: \"GET\", model: \"Device\", filters });\nconst _delete = (model, instance_id) =>\n  store.dispatch({ type: \"DELETE\", model, instance_id });\nconst bulk_insert = (model, instances) =>\n  store.dispatch({ type: \"BULK_INSERT\", model, instances });\nconst set = (model, instance_id, instance) =>\n  store.dispatch({ type: \"UPDATE\", model, instance_id, instance });\n\n// filters actions\nconst get_filters = () => store.dispatch({ type: \"GET_FILTERS\" });\nconst clear_filters = () => store.dispatch({ type: \"CLEAR_FILTERS\" });\nconst apply_filters = (filters) =>\n  store.dispatch({ type: \"APPLY_FILTERS\", filters });\n\nexport {\n  get,\n  set,\n  add,\n  clear,\n  _delete,\n  bulk_insert,\n  get_devices,\n  get_filters,\n  apply_filters,\n  clear_filters,\n};\n","import { array_to_object } from \"../redux\";\nimport { bulk_insert } from \"../redux/actions\";\nimport { getDefaultParser } from \"../services/parserScript\";\n\nconst selectLabelMapper = {\n  id_field: \"id\",\n  label_field: \"file_name\",\n};\n\nconst onParserIdChange = (evt, deviceParsers, handleChange) => {\n  evt.preventDefault();\n  let parserId = evt.target.value;\n  let { s3_key = \"\" } =\n    parserId in deviceParsers ? deviceParsers[parserId] : {};\n  let baseUrl = `https://lh-interfacing.s3.ap-south-1.amazonaws.com/parsers/${s3_key}`;\n  fetch(baseUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/javascript\",\n    },\n  })\n    .then((response) => response.text())\n    .then((parserScript) => {\n      parserScript = parserScript.includes(\"<Code>AccessDenied</Code\")\n        ? getDefaultParser()\n        : `\\n${parserScript}`;\n      handleChange({ parserScript, parserId });\n    });\n};\n\nconst saveParsers = (parsers) => {\n  let defaultParser = { id: -1, s3_key: null, file_name: \"Select Parser\" };\n  parsers = parsers || [];\n  parsers.unshift(defaultParser);\n  bulk_insert(\"DeviceParser\", array_to_object(parsers, \"id\"));\n};\n\nconst fetchParsers = ({\n  lab_id = null,\n  device_id = null,\n  parser_id = null,\n}) => {\n  fetch(\"interfacing/get-parsers\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: JSON.stringify({\n      lab_id,\n      device_id,\n      parser_id,\n    }),\n  })\n    .then((response) => response.json())\n    .then((response) => saveParsers(response.parsers))\n    .catch((error) => {\n      console.error(error);\n      saveParsers([]);\n    });\n};\n\nexport { fetchParsers, selectLabelMapper, onParserIdChange };\n","import { fetchDevices } from \"../services/device\";\nimport { fetchParsers } from \"../services/parser\";\n\nconst array_to_object = (list, id_field) =>\n  Object.assign({}, ...list.map((item) => ({ [item[id_field]]: item })));\n\nconst init_redux = () => {\n  // get devices from local system\n  fetchDevices({});\n  fetchParsers({});\n};\n\nexport { init_redux, array_to_object };\n","import { array_to_object } from \".\";\n\nconst models_id_mapper = {\n  Device: \"deviceId\",\n  DeviceParser: \"id\",\n};\n\nconst get_model_id_field = (model) => {\n  if (!models_id_mapper.hasOwnProperty(model))\n    throw new Error(\"Invalid Model ID Mapping\");\n\n  return models_id_mapper[model];\n};\n\nconst save_instance = (state, model, instance) => {\n  // save the instance into redux\n\n  if (!model || !Object.keys(instance).length) return state;\n\n  let instances = state.hasOwnProperty(model) ? state[model] : {};\n\n  const id_field = get_model_id_field(model);\n  let instance_id = instance.hasOwnProperty(id_field)\n    ? instance[id_field]\n    : null;\n\n  if (!instance_id) throw new Error(\"Instance is Missing ID Field\");\n\n  let to_insert = {\n    [instance_id]: instance,\n  };\n\n  // add new instance to model\n  instances = { ...instances, ...to_insert };\n  return { ...state, [model]: instances };\n};\n\nconst updated_instance = (state, model, instance_id, instance) => {\n  if (!model || !Object.keys(instance).length) return state;\n\n  let instances = state.hasOwnProperty(model) ? state[model] : {};\n\n  // const id_field = get_model_id_field(model);\n  if (!instance_id) throw new Error(\"Instance is Missing ID Field\");\n\n  let old_instance = instances.hasOwnProperty(instance_id)\n    ? instances[instance_id]\n    : null;\n\n  if (!old_instance)\n    throw new Error(`Can not find the Instance with ID ${instance_id}`);\n\n  const updated_instance = { ...old_instance, ...instance };\n  let to_update = {\n    [instance_id]: updated_instance,\n  };\n\n  // add new instance to model\n  instances = { ...instances, ...to_update };\n  return { ...state, [model]: instances };\n};\n\nconst delete_instance = (state, model, instance_id) => {\n  if (!model) return state;\n\n  let instances = state.hasOwnProperty(model) ? state[model] : {};\n\n  delete instances[instance_id];\n  return { ...state, [model]: instances };\n};\n\nconst prepare_instances = (model, instances) => {\n  const id_field = get_model_id_field(model);\n  return instances instanceof Array\n    ? array_to_object(instances, id_field)\n    : instances;\n};\n\nconst bulk_insert = (state, model, instances) => {\n  if (!model) return state;\n\n  let new_instances = prepare_instances(model, instances);\n  return { ...state, [model]: new_instances };\n};\n\nconst clear_model = (state, model) => {\n  if (!model) return state;\n\n  return { ...state, [model]: {} };\n};\n\nexport const modelReducer = (state = {}, action) => {\n  let {\n    model = \"\",\n    instance = {},\n    instances = {},\n    instance_id = null,\n  } = action;\n\n  switch (action.type) {\n    case \"CLEAR\":\n      return clear_model(state, model);\n    case \"BULK_INSERT\":\n      return bulk_insert(state, model, instances);\n    case \"SAVE\":\n      return save_instance(state, model, instance);\n    case \"UPDATE\":\n      return updated_instance(state, model, instance_id, instance);\n    case \"DELETE\":\n      return delete_instance(state, model, instance_id);\n    default:\n      return state;\n  }\n};\n\nconst defaultFilters = { lab_id: \"\", device_id: -1, parser_id: -1 };\nexport const filtersReducer = (state = defaultFilters, action) => {\n  let { field = \"lab_id\", value = -1 } = action || {};\n\n  switch (action.type) {\n    case \"CLEAR_FILTERS\":\n      return { ...state, ...defaultFilters };\n    case \"APPLY_FILTERS\":\n      return { ...state, [field]: value };\n    default:\n      return state;\n  }\n};\n","import { modelReducer, filtersReducer } from \"./reducers\";\nimport { combineReducers, createStore } from \"redux\";\n\nconst reducers = combineReducers({\n  models: modelReducer,\n  filters: filtersReducer,\n});\n\n// const persistedReducer = persistReducer(persistConfig, reducers)\nlet store = true\n  ? createStore(\n      reducers,\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n        window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  : createStore(reducers);\n\nexport { store };\n","import { store } from \"../redux/store\";\nimport { array_to_object } from \"../redux\";\nimport { bulk_insert } from \"../redux/actions\";\nimport { Device } from \"../services/deviceUtils\";\n\nconst selectLabelMapper = {\n  id_field: \"deviceId\",\n  label_field: \"deviceName\",\n};\n\nconst onDeviceIdChange = (evt, handleChange) => {\n  evt.preventDefault();\n  handleChange({ deviceId: evt.target.value });\n};\n\nconst saveDevices = (devices) => {\n  let defaultDevice = {\n    deviceId: -1,\n    deviceName: \"Select Device\",\n    settings: \"{}\",\n    labId_id: \"\",\n    globalParser_id: -1,\n  };\n  devices = devices.map((device) => {\n    let { settings = \"{}\" } = device;\n    try {\n      settings = JSON.parse(device.settings || \"{}\");\n    } catch (error) {\n      settings = {};\n    }\n    return { ...device, settings };\n  });\n\n  devices = devices || [];\n  devices.unshift(defaultDevice);\n  bulk_insert(\"Device\", array_to_object(devices, \"deviceId\"));\n};\n\nconst fetchDevices = ({ lab_id = null }) => {\n  fetch(\"interfacing/get-devices\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: JSON.stringify({\n      lab_id,\n    }),\n  })\n    .then((response) => response.json())\n    .then((response) => saveDevices(response.devices))\n    .catch((error) => saveDevices([]));\n};\n\nconst getDevice = (deviceId) => {\n  const { models = {} } = store.getState();\n  let devices = \"Device\" in models ? models[\"Device\"] : {};\n  return new Device(deviceId && deviceId in devices ? devices[deviceId] : {});\n};\n\nexport { fetchDevices, selectLabelMapper, getDevice, onDeviceIdChange };\n","import { getDevice } from \"./device\";\n\nconst getDefaultParser = () => {\n  return `\n/*\n\n  To change the paramter use the following code snippet\n\n  parameter = parameter in device.parameter_mapping?\n    device.parameter_mapping[parameter]: parameter;\n\n  for calculation support use below code snippet\n  value = device.parse_and_calculate_value(parameter, value);\n\n*/\n\nconst parser = function({ received_str, device  }) {\n  let values = {};\n  let sample_ids = [];\n  let sampleId = null;\n  let is_query = false;\n  let report_values = [];\n\n  // start device parser from here\n\n  // push the last value in the report_values\n  report_values.push({\n    data: {\n      sampleId,\n      values: Object.assign({}, values)\n    }\n  });\n\n  return { report_values, query: {sample_ids}, is_query }\n}\n\nmodule.exports = { parser, build_order: args => \"\" }`;\n};\n\nconst prepareParser = (parserScript) => {\n  let _parserScript = parserScript\n    .replace(new RegExp(\"const\", \"g\"), \"var\")\n    .replace(new RegExp(\"let\", \"g\"), \"var\")\n    .split(\"module.exports = \")[0];\n\n  return _parserScript;\n};\n\nconst addScriptAndExecute = ({\n  receivedStr,\n  parserScript,\n  deviceId,\n  handleChange,\n}) => {\n  let existingParser = document.getElementById(\"parser-script\");\n  if (existingParser) existingParser.remove();\n\n  let newParser = document.createElement(\"script\");\n  newParser.text = prepareParser(parserScript);\n  newParser.id = \"parser-script\";\n  document.body.appendChild(newParser);\n\n  let parsedResult = {};\n  if (\"parser\" in window) {\n    try {\n      let device = getDevice(deviceId);\n      parsedResult = window.parser({\n        device,\n        received_str: receivedStr,\n      });\n      handleChange({ parsedResult });\n    } catch (error) {\n      handleChange({ parserError: error });\n    }\n  }\n};\n\nexport { addScriptAndExecute, getDefaultParser };\n","import React from \"react\";\nimport { ControlledEditor } from \"@monaco-editor/react\";\nimport { getDefaultParser } from \"../services/parserScript\";\n\nconst getEditor = (props) => {\n  let { parserScript = \"\", handleChange } = props;\n  let editorOptions = {\n    tabSize: 2,\n    insertSpaces: true,\n    automaticLayout: true,\n    folding: window.screen.width >= 768,\n    lineNumbers: window.screen.width <= 768 ? \"off\" : \"on\",\n    glyphMargin: window.screen.width >= 768,\n    minimap: {\n      enabled: false,\n    },\n  };\n\n  const editorDidMount = (monaco, editor) => {\n    let defaultParser = getDefaultParser();\n    if (!parserScript) handleChange({ parserScript: defaultParser });\n\n    editor.focus();\n  };\n\n  return (\n    <ControlledEditor\n      height=\"100vh\"\n      language=\"javascript\"\n      theme=\"vs-dark\"\n      value={parserScript}\n      options={editorOptions}\n      editorDidMount={editorDidMount}\n      onChange={(evt, parserScript) => handleChange({ parserScript })}\n    />\n  );\n};\n\nexport default getEditor;\n","import React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\nconst prepareInputProps = (props) => {\n  let {\n    id = \"\",\n    name = \"\",\n    value = \"\",\n    type = \"text\",\n    className = \"\",\n    disabled = false,\n    input_label = \"\",\n    onChange = (evt) => evt.preventDefault(),\n  } = props;\n\n  if (!id) throw new Error(\"Invalid Input Id\");\n\n  name = name || id;\n  input_label =\n    input_label ||\n    id\n      .replace(/([-_])+/g, \" \")\n      .trim()\n      .split(\" \")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(\"\")\n      .replace(/([A-Z])/g, \" $1\");\n\n  className = className || id;\n  let options = {\n    id,\n    type,\n    name,\n    value,\n    disabled,\n    onChange,\n    className,\n    input_label,\n    placeholder: input_label,\n  };\n  return options;\n};\n\nconst renderInput = (props) => {\n  let inputProps = prepareInputProps(props);\n  let { name, input_label } = inputProps;\n\n  return (\n    <FormGroup>\n      <Label for={name} className=\"form-label\">\n        {input_label}\n      </Label>\n      <Input {...inputProps} />\n    </FormGroup>\n  );\n};\n\nexport { renderInput, prepareInputProps };\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\nimport {\n  getDefaultParser,\n  addScriptAndExecute,\n} from \"../services/parserScript\";\n\nconst renderButtons = ({\n  receivedStr = \"\",\n  parserScript = \"\",\n  deviceId = -1,\n  handleChange,\n}) => {\n  const parseReceivedStr = (evt) => {\n    evt.preventDefault();\n    addScriptAndExecute({ receivedStr, parserScript, deviceId, handleChange });\n  };\n\n  const newParser = (evt) => {\n    evt.preventDefault();\n    handleChange({ parserScript: getDefaultParser() });\n  };\n\n  return (\n    <Col xs=\"12\" style={{ paddingTop: \"2px\" }}>\n      <Row>\n        <Col xs=\"4\" style={{ marginBottom: \"5px\", textAlign: \"left\" }}>\n          <Button\n            outline\n            color=\"primary\"\n            className=\"parser-buttons parser-buttons-left-0\"\n            size=\"sm\"\n            onClick={(evt) => parseReceivedStr(evt)}\n            disabled={parserScript.length <= 0 || receivedStr.length <= 0}\n          >\n            Parse\n          </Button>\n        </Col>\n        <Col xs=\"8\" style={{ marginBottom: \"5px\", textAlign: \"right\" }}>\n          <Button\n            outline\n            color=\"secondary\"\n            className=\"parser-buttons\"\n            size=\"sm\"\n            onClick={(evt) => newParser(evt)}\n          >\n            New\n          </Button>\n        </Col>\n      </Row>\n    </Col>\n  );\n};\n\nexport { renderButtons };\n","import { connect } from \"react-redux\";\nimport { Row, Col } from \"reactstrap\";\nimport React, { useState } from \"react\";\n\nimport { getEditor } from \"../editor\";\nimport { renderFilters } from \"./filters\";\nimport { renderButtons } from \"./buttons\";\nimport { renderInput } from \"../controls/input\";\n\nconst VerifyParsers = (props) => {\n  let [state, setValues] = useState({});\n  let { deviceParsers = {}, devices = [], parsers = [] } = props;\n  let {\n    labId = \"\",\n    deviceId = -1,\n    parserId = -1,\n    receivedStr = \"\",\n    parserError = \"\",\n    parserScript = \"\",\n    parsedResult = {},\n  } = state;\n  const handleChange = (values) => setValues({ ...state, ...values });\n\n  return (\n    <React.Fragment>\n      <Row className='row-margin-0'>\n        <Col sm=\"7\" xs=\"12\" style={{ paddingLeft: \"0px\" }}>\n          {getEditor({ parserScript, handleChange })}\n        </Col>\n        <Col sm=\"5\" xs=\"12\" className='col-padding-left-15' style={{ paddingLeft: \"0px\", paddingTop: \"30px\" }}>\n          <Row>\n            <Col xs=\"12\">\n              {renderInput({\n                type: \"textarea\",\n                id: \"receivedStr\",\n                className: \"received-str\",\n                input_label: \"Received Result\",\n                value: receivedStr,\n                onChange: (evt) =>\n                  handleChange({ [evt.target.id]: evt.target.value }),\n              })}\n            </Col>\n          </Row>\n          <Row>\n            {renderButtons({\n              receivedStr,\n              parserScript,\n              deviceId,\n              handleChange,\n            })}\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              {renderInput({\n                disable: true,\n                id: \"parsed-result\",\n                type: \"textarea\",\n                value: JSON.stringify(parsedResult, null, 2),\n              })}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              {parserError &&\n                renderInput({\n                  disable: true,\n                  id: \"parser-error\",\n                  type: \"textarea\",\n                  value: parserError,\n                })}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const sortById = (items) => {\n    let ids = Object.keys(items).sort((a, b) => a - b);\n    return ids;\n  };\n  const { models = {}, filters = {} } = state;\n  let _devices = \"Device\" in models ? models[\"Device\"] : {};\n  let _parsers = \"DeviceParser\" in models ? models[\"DeviceParser\"] : {};\n\n  let devices = sortById(_devices).map((device_id) => _devices[device_id]);\n  let parsers = sortById(_parsers).map((parser_id) => _parsers[parser_id]);\n  return { devices, parsers, deviceParsers: _parsers, ...filters };\n};\n\nconst VerifyParsersConnector = connect(mapStateToProps)(VerifyParsers);\nexport default VerifyParsersConnector;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport VerifyParsers from \"./components/verify\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./redux/store\";\nimport { init_redux } from \"./redux/index\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ninit_redux();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <VerifyParsers />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}