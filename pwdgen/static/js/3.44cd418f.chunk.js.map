{"version":3,"sources":["services/password.ts","PasswordPreferences.tsx","utils/controlUtils.ts","components/input.tsx"],"names":["SPECIAL_CHARACTERS","addSpecialCharacter","pwd","maxCharacters","chars","indexes","match","split","forEach","ch","idx","includes","toString","push","parseInt","length","join","addNumbers","totalNumbers","removeNumbers","filter","applyUpperCase","toUpperCase","toLowerCase","applyLowerCase","removeRepeatedCharacters","generatePassword","preferences","site_url","passphrase","maximum_numbers","maximum_password_length","maximum_special_characters","maximum_uppercase_characters","include_numbers","include_special_characters","include_uppercase_characters","exclude_repeated_characters","error","functions","password","_site_url","pop","CryptoJS","HmacSHA512","enc","Base64","getPassword","fn","slice","PasswordPreferences","props","setPassword","onChange","fieldId","value","setState","state","FIELDS","reqd","type","onClick","save_my_preference","Object","keys","localStorage","removeItem","setItem","copyToClipBoard","disabled","shouldDisableButton","useState","getInitValues","className","map","field","prepareProps","name","label","clsName","checked","inputClsName","hideLabel","prependLabel","dashCaseToTitleCase","placeholder","trim","Boolean","fields","every","assign","getItem","parser","CustomInput","React","memo","hidden","id","evt","_id","target"],"mappings":"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","file":"static/js/3.44cd418f.chunk.js","sourcesContent":["import CryptoJS from 'crypto-js';\n\nconst SPECIAL_CHARACTERS = \"!@#$%\";\n\nconst getPassword = (site_url: any, passphrase: string) => {\n  let _site_url = site_url\n    .split(/https:|http:/g)\n    .pop()\n    .split(\"/\")\n\n  _site_url = _site_url.length > 3\n    ? _site_url[2]\n    : _site_url[0]\n\n  let password = CryptoJS\n    .HmacSHA512(_site_url, passphrase)\n    .toString(CryptoJS.enc.Base64)\n\n  return password\n}\n\nconst addSpecialCharacter = (pwd: string, maxCharacters?: number) => {\n  let chars: any = [];\n  let indexes: any = pwd.match(/\\d+/g);\n  pwd.split('')\n    .forEach((ch: any, idx: number) => {\n      if(indexes.includes(ch.toString()))\n        chars.push(SPECIAL_CHARACTERS[parseInt(ch) % SPECIAL_CHARACTERS.length]);\n      chars.push(ch);\n    })\n  return chars.join('')\n}\n\nconst addNumbers = (pwd: string, maxCharacters: number) => {\n  let totalNumbers = 0\n  let chars: any = [];\n  pwd.split('')\n    .forEach((ch: any, idx: number) => {\n      ch.match(/\\d+/g);\n      if(\n        ch.match(/\\d+/g)\n          && totalNumbers < maxCharacters\n          && idx % 4 === 0\n      ) {\n        chars.push(ch);\n        totalNumbers += 1;\n      } else if(!ch.match(/\\d+/g))\n        chars.push(ch);\n    })\n  return chars.join('')\n}\n\nconst removeNumbers = (pwd: string, maxCharacters: number) => {\n  return pwd.split('')\n    .filter((ch: any) => !ch.match(/\\d+/g))\n    .join('')\n}\n\nconst applyUpperCase = (pwd: string, maxCharacters: number) => {\n  let totalNumbers = 0\n  let chars: any = [];\n  pwd.split('')\n    .forEach((ch: any, idx: number) => {\n      ch.match(/\\w+/g);\n      if(\n        ch.match(/\\w+/g)\n         && totalNumbers <= maxCharacters\n         && (idx + 1) % 4 === 0\n      ) {\n        chars.push(ch.toUpperCase());\n        totalNumbers += 1;\n      } else\n        chars.push(ch.toLowerCase());\n    })\n  return chars.join('')\n}\n\nconst applyLowerCase = (pwd: string, maxCharacters?: number) => {\n  return pwd.toLowerCase()\n}\n\nconst removeRepeatedCharacters = (pwd: string) => {\n  let chars: any = [];\n  pwd.split('')\n    .forEach((ch: any) => (!chars.includes(ch) && chars.push(ch)))\n\n  return chars.join('')\n}\n\nexport const generatePassword = (preferences: any) => {\n  let {\n    site_url=\"\",\n    passphrase=\"\",\n    maximum_numbers=0,\n    maximum_password_length=8,\n    maximum_special_characters=0,\n    maximum_uppercase_characters=0,\n\n    include_numbers=false,\n    include_special_characters=false,\n    include_uppercase_characters=false,\n    exclude_repeated_characters=false,\n  } = preferences;\n\n  const shouldAddNumber = () => (\n    include_numbers && maximum_numbers && maximum_numbers > 0\n  )\n  const shouldApplyUpperCase = () => (\n    include_uppercase_characters && maximum_uppercase_characters &&\n    maximum_uppercase_characters > 0\n  )\n\n  if(!site_url || !passphrase)\n    return {}\n\n  else if(passphrase.length < 8)\n    return { error: \"Passphrase should be greater than 8 character\" }\n\n  let functions = [];\n  let password = getPassword(site_url, passphrase)\n  if(shouldAddNumber())\n    functions.push({\n      fn: addNumbers,\n      maxCharacters: maximum_numbers\n    })\n  else\n    functions.push({\n      fn: removeNumbers,\n      maxCharacters: maximum_numbers\n    })\n\n  if(shouldApplyUpperCase())\n    functions.push({\n      fn: applyUpperCase,\n      maxCharacters: maximum_uppercase_characters\n    })\n  else\n    functions.push({ fn: applyLowerCase })\n\n  if(include_special_characters)\n    functions.push({\n      fn: addSpecialCharacter,\n      maxCharacters: maximum_special_characters\n    })\n\n  exclude_repeated_characters && functions.push({ fn: removeRepeatedCharacters })\n  functions.forEach(({ fn, maxCharacters=0 }) => {\n    password = fn(password, maxCharacters)\n  })\n\n  password = password.length < maximum_password_length\n    ? password\n    : password.slice(0, maximum_password_length);\n\n  return { password }\n}","import React, { useState } from 'react';\n\nimport { copyToClipBoard } from \"./utils\";\nimport { CustomInput } from \"./components/input\";\nimport { generatePassword } from \"./services/password\";\nimport { shouldDisableButton, getInitValues } from \"./utils/controlUtils\";\n\nconst PasswordPreferences = (props: any) => {\n  const { setPassword } = props;\n  const onChange = (fieldId: string, value: string) => {\n    setState({ ...state, [fieldId]: value })\n  }\n\n  const onClick = () => {\n    let { password='' } = generatePassword(state);\n    if(state?.save_my_preference) {\n      Object.keys(state).forEach((fieldId: string) => {\n        localStorage.removeItem(fieldId);\n        if([\"passphrase\", \"site_url\"].includes(fieldId))\n          return\n\n        localStorage.setItem(fieldId, state[fieldId])\n      })\n    } else\n      Object.keys(state).forEach(\n        (fieldId: string) => localStorage.removeItem(fieldId))\n\n    setPassword(password);\n    copyToClipBoard(password);\n  }\n\n  const isDisabled = () => shouldDisableButton(FIELDS, state);\n  const FIELDS = [\n    { fieldId: \"site_url\", onChange, reqd: true },\n    { type: \"password\", fieldId: \"passphrase\", onChange, reqd: true },\n    { type: \"checkbox\", fieldId: \"include_numbers\", onChange },\n    { type: \"checkbox\", fieldId: \"include_special_characters\", onChange },\n    { type: \"checkbox\", fieldId: \"include_uppercase_characters\", onChange },\n    { type: \"checkbox\", fieldId: \"exclude_repeated_characters\", onChange },\n    { type: \"number\", fieldId: \"maximum_password_length\", onChange },\n    { type: \"number\", fieldId: \"maximum_uppercase_characters\", onChange },\n    { type: \"number\", fieldId: \"maximum_numbers\", onChange },\n    { type: \"button\", fieldId: \"generate_password\", onClick, disabled: isDisabled },\n    { type: \"checkbox\", fieldId: \"save_my_preference\", onChange },\n  ]\n\n  const [state, setState] = useState<any>(() => getInitValues(FIELDS));\n  return (\n    <div className=\"password-preferences\">\n    {\n      FIELDS.map((field: any, idx: number) => {\n        let value = field.fieldId in state? state[field.fieldId]: \"\";\n        return <CustomInput\n          key={idx}\n          {...field}\n          value={value}\n        />\n      })\n    }\n    </div>\n  )\n}\n\nexport default PasswordPreferences;","\nimport { dashCaseToTitleCase } from '../utils';\n\nconst prepareProps = (props: any) => {\n\tlet {\n    fieldId,\n    name=\"\",\n    label=\"\",\n    value=\"\",\n    clsName=\"\",\n    checked=false,\n    inputClsName=\"\",\n    disabled=false,\n    hideLabel=false,\n    prependLabel=true\n  } = props;\n  label = label || dashCaseToTitleCase(fieldId);\n  let placeholder = `Enter the ${label}`;\n  inputClsName = `control ${inputClsName}`.trim();\n  if([\"radio\", \"checkbox\"].includes(props?.type)) {\n    clsName =  !clsName ? `${props?.type}-control-group`: clsName;\n    prependLabel = false;\n    checked = Boolean(value);\n  } else if(props?.type === \"button\") {\n    hideLabel = true;\n    value=label;\n  }\n\n  clsName = !clsName? \"control-group\": clsName;\n  disabled = typeof(disabled) === \"function\"\n    ? disabled()\n    : disabled\n\n\treturn {\n    ...props,\n    label,\n    value,\n    checked,\n    clsName,\n    disabled,\n    hideLabel,\n    placeholder,\n    inputClsName,\n    prependLabel,\n    name: name || fieldId\n  };\n}\n\nconst shouldDisableButton = (fields: any[], state: any) => {\n  return !fields\n    .filter(({ reqd=false }) => reqd)\n    .map(({ fieldId }) => (\n      fieldId in state && state[fieldId].trim().length\n    ))\n    .every((disabled: boolean) => disabled);\n}\n\nconst getInitValues = (fields: any[]) => {\n  return Object.assign({},\n    ...fields\n      .filter(({ fieldId }) => localStorage.getItem(fieldId))\n      .map(({ fieldId, type }) => {\n        let value: any = localStorage.getItem(fieldId);\n        let parser = type === \"checkbox\"\n          ? (value: any) => Boolean(value === \"true\")\n          : type === \"number\"\n          ? parseInt\n          : (value: any) => value\n\n        return { [fieldId]: parser(value) }\n      })\n    );\n}\n\nexport {\n  prepareProps,\n  getInitValues,\n  shouldDisableButton,\n}","import React from 'react';\nimport { prepareProps } from \"../utils/controlUtils\";\n\nexport const CustomInput = React.memo(\n  (props: any) => {\n    let {\n      name=\"\",\n      type=\"\",\n      label=\"\",\n      value=\"\",\n      clsName=\"\",\n      fieldId=\"\",\n      hidden=false,\n      checked=false,\n      disabled=false,\n      placeholder=\"\",\n      inputClsName=\"\",\n      hideLabel=false,\n      prependLabel=true,\n      onChange=() => null,\n      onClick=() => null,\n    } = prepareProps(props);\n\n    const handleOnChange = (evt: any) => {\n      let _id = evt.target.id;\n      let value = [\"checkbox\", \"radio\"].includes(evt.target.type)\n        ? evt.target.checked\n        : evt.target.value;\n\n      value = evt.target.type === \"number\"\n        ? parseInt(value)\n        : value\n\n      onChange(_id, value);\n    }\n\n    if(hidden)\n      clsName = `${clsName} hidden`;\n\n    return (\n      <div className={clsName}>\n        {!hideLabel && prependLabel && <label className=\"control-label\">{label}</label>}\n        <input\n          type={type}\n          id={fieldId}\n          name={name}\n          value={value}\n          checked={checked}\n          disabled={disabled}\n          className={inputClsName}\n          placeholder={placeholder}\n          onChange={handleOnChange}\n          onClick={onClick}\n        />\n        {!hideLabel && !prependLabel && <label className=\"control-label\">{label}</label>}\n      </div>\n    )\n  }\n)"],"sourceRoot":""}